#include <msp430g2553.h>

#define SMCLKRATE 16000000
#define BAUDRATE 9600 //115200 would be ideal
#define BRDIV16 ((16*SMCLKRATE)/BAUDRATE) //26666
#define BRDIV (BRDIV16/16) //1666
#define BRMOD ((BRDIV16-(16*BRDIV)+1)/16) //24999
#define BRDIVHI (BRDIV/256) //6
#define BRDIVLO (BRDIV-BRDIVHI*256) //130
#define UART_TX 0x04
#define UART_RX 0x02

#define SDA 0x01
#define SCL 0x02

int bit_count = 0;
char tx_data;

int main(void) {
	//calibration for clock
    BCSCTL1 = CALBC1_16MHZ;
	DCOCTL  = CALDCO_16MHZ;
	//Stop watchdog timer
    WDTCTL = WDTPW | WDTHOLD;

    //I2C data and clock busses are inputs, All other pins on port 2 are outputs
    P2DIR = ~(SCL + SDA);
    //Enable pullup resistors, lines high by default
    P2REN = SCL + SDA;
    P2IE |= SCL + SDA;
    P2IES |= SDA; //first interrupt will be triggered on falling edge

    //Initializing UART
    //reset and hold UART state machine
    UCA0CTL1 = UCSWRST;
    //SMCLK is clock source
    UCA0CTL1 |= UCSSEL_2;
    //set baud parameters, prescaler hi
    UCA0BR1 = BRDIVHI;
    //prescaler lo
    UCA0BR0 = BRDIVLO;
    //modulation
    UCA0MCTL = 2*BRMOD;
    //Connect transmitter pin
    P1SEL |= UART_TX;
    P1SEL2 |= UART_TX;
    //loop mode enabled
    //UCA0STAT |=  UCLISTEN;
    //allow the UART state machine to operate
    UCA0CTL1 &= ~UCSWRST;
    //Enable transmit interrupt;

    _bis_SR_register(GIE + LPM0_bits);
}


//GPIO pin interrupt
void interrupt I2C_line_handler() {
	if (P2IFG & SCL) {
		//Clock line triggered interrupt, low to high transition
		if (P2IES & SCL) {
			//Transition was high to low
			P2IE &= ~SDA; //Disable dataline interrupt
			P2IES &= ~SCL; //Next transition on low to high
	    } else if (!(P2IES & SCL) && bit_count == 8){
			//Transition was low to high, ack bit
			P2IE |= SDA; //enable data line interrupt
			P2IES |= SCL; //next interrupt on high -> low
			char data_bit = P2IN & SDA;
			tx_data = 0b01010110 | data_bit; //Prints V for ack, W for nack
			bit_count = 0;
			IE2 |= UCA0TXIE; //Enable UART transmit interrupt*/
		} else if (!(P2IES & SCL)){
			//transition was low to high, data bits
			P2IE |= SDA; //enable data line interrupt
			P2IES |= SCL; //next interrupt on high -> low
			char data_bit = P2IN & SDA;
			tx_data = 0b00110000 | data_bit; //prints 1 or 0
			bit_count = bit_count + 1;
			IE2 |= UCA0TXIE; //Enable UART transmit interrupt
		}
	} else if (P2IFG & SDA) {
		//data line triggered interrupt
		P2IES ^= SDA; //Next interrupt will trigger on opposite edge
		char data_bit = P2IN & SDA;
		tx_data = 0b01011000 | data_bit; //"Prints X for start, Y for stop
		bit_count = 0; //Sometimes will read a data bit when controller plugged in: this insures counter reset
		IE2 |= UCA0TXIE; //Enable UART transmit interrupt
	}
	P2IFG &= ~(SCL + SDA); //Clear interrupt flags
}
ISR_VECTOR(I2C_line_handler, ".int03")


//UART data transmit handler
void interrupt tx_handler(){
	UCA0TXBUF = tx_data;
	IE2 &= ~UCA0TXIE;
}
ISR_VECTOR(tx_handler, ".int06")




